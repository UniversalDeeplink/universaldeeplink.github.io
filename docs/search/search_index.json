{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Download from the Unity Asset Store | Download Pro Version from the Unity Asset Store </p> <p>Discord Support  | Mail Contact</p> <p>ImaginationOverflow Universal Deep Linking plugin enables your games to use Deep Linking and Domain Association in iOS, Android, Windows (UWP), Standalone (Linux, Mac, and Windows), tvOS.</p> <p>Deep Linking consists of using a uniform resource identifier (URI) that links to a specific location within a mobile app rather than simply launching the app.\" (Mobile deep linking @ Wikipedia)</p> <p>Domain Association is a similar feature but instead of using custom URIs (mycustomuri://somecontent) it utilizes  Web URIs (www.mydomain/somecontent) to directly open your games on a specific location</p> <p>Each mobile platform has a specific name for this feature, iOS/tvOS calls it Universal Links, Android has its App links and Windows named it Uri handling, throughout this documentation we will refer the ability to associate a web URI with your game as Domain Association.</p> <p>We will be using our game Sudoku Zenkai (iOS, Android, Windows and Steam) as a use case throughout this documentation. Anyone that purchases the plugin in entitled to a free Steam key to check a live example of this plugin usage, to get it just contact us on our Discord channel or via mail</p> <p>Universal Deep Linking plugin enables your games to use Deep Linking on iOS, Android, Windows (UWP), tvOS, Windows, Mac, Linux and Steam (Linux, Mac, and Windows). </p> <p>Currently, the plugin supports Domain Association to iOS, Android, Windows UWP (Mobile, Tablet, and Desktop) and tvOS.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>How to Use</li> <li>Configuring the Plugin</li> <li>Testing</li> </ul>"},{"location":"#domain-association","title":"Domain Association","text":"<ul> <li>iOS</li> <li>Android</li> <li>Windows UWP (Windows Store Apps)</li> </ul>"},{"location":"#steam-integration","title":"Steam Integration","text":"<ul> <li>Configuring the Plugin</li> <li>Mac integration details</li> </ul>"},{"location":"#inside-the-plugin","title":"Inside the Plugin","text":"<ul> <li>Overview</li> <li>Details on all supported platforms</li> </ul>"},{"location":"#showcase","title":"Showcase","text":"<ul> <li>Games using the Plugin</li> </ul>"},{"location":"About/","title":"About","text":"<p>ImaginationOverflow is a polyvalent group of people that come together in order to make software. They specialize in Apps made with Xamarin and Unity games. As indies, they published dozen of apps and games.</p>"},{"location":"About/#authors","title":"Authors","text":"<p>Diogo Cardoso - Twitter --- LinkedIn</p> <p>Ana Correia - LinkedIn</p>"},{"location":"About/#links","title":"Links","text":"<p>Website</p> <p>Twitter</p> <p>Facebook</p> <p>Steam Page</p> <p>Play Store</p> <p>App Store</p> <p>Microsoft Store</p> <p>Discord Server</p> <p>Contact Email</p> <p>Blog</p>"},{"location":"About/#acknowledgements","title":"Acknowledgements","text":"<ul> <li>The portuguese gamedev community for suggestions and support.</li> <li>Geri Borb\u00e1s for his awesome articles regarding unity plugins and library injection on MacOs</li> <li>Alex Zielenski for creating optool and open it for the community</li> <li>Our Patrons, Eric T, Tom T, Michael, Abdullah T</li> </ul>"},{"location":"DomainAssociation/","title":"Domain Association","text":"<p>The documentation below is just a quick setup guide so that you can quickly integrate the Domain Association capability of the ImaginationOverflow Universal Deep Linking plugin if you wish to know more about this feature you can consult the official documentation:</p> <ul> <li>Universal Links - iOS</li> <li>App Links - Android</li> <li>Uri Handling - Windows UWP</li> </ul> <p>Note that the Universal Deep Linking plugin already handles all registration and configuration to support Domain Association, you won't need to change any configurations on your manifest or configuration files on your Unity project. </p> <p>The plugin does not, however, create or configure the required files that you need to host on your website, nor the dev account configurations required to enables this capability on some platforms. </p> <p>The following configuration steps are only required if you wish to use the Domain Association feature, if you are only using Deep Linking, you can skip these steps.</p>"},{"location":"DomainAssociation/#iostvos-universal-links","title":"iOS/tvOS - Universal Links","text":"<p>The first thing you will need to do is activate the Associated Domains service on your app id:</p> <ol> <li>Login on your Apple developer account in https://developer.apple.com/</li> <li>In Identifiers -&gt; App ID's, create or edit the app you wish to add Domain Association.</li> <li>Check the Associated Domains checkbox</li> <li>Save the changes</li> </ol> <p>After you added the Associated Domain service, your page should look like the following:</p> <p></p> <p>From the above image, set-aside the Prefix and the ID. In Sudoku Zenkai case the Prefix is 5DVD99WQGR and the ID com.imaginationoverflow.com.sudokuzenkai.</p> <p>Now you need to create a json file named apple-app-site-association (no extension) with the following contents:</p> <pre><code>{\n\"applinks\": {\n\"apps\": [],\n\"details\": [\n{\n\"appID\": \"[PREFIX].[ID]\",\n\"paths\": [ \"*\"]\n}\n]\n}\n}\n</code></pre> <p>With the file created you need to upload it to your website. The file should be accessible on either, the root or the .well-known directory:</p> <pre><code>https://&lt;your_domain&gt;/.well-known/apple-app-site-association\n\nor\n\nhttps://&lt;your_domain&gt;/apple-app-site-association\n</code></pre> <p>You can check Sudoku Zenkai and Loyca (other of our projects) association files on: http://sudokuzenkai.imaginationoverflow.com/apple-app-site-association </p> <p>http://loyca.imaginationoverflow.com/.well-known/apple-app-site-association</p> <p>With the above configuration, you are telling the iOS that all links to your website should be opened in your game, you may wish to configure only a few paths, to do that you can check the official documentation.</p> <p>Finally, your site must be using HTTPS, if you don't have it this feature won't work! </p>"},{"location":"DomainAssociation/#android-app-links","title":"Android - App Links","text":"<p>The first thing you need to configure the Domain Association is a package name, to configure that on your Unity Project click on Edit -&gt; Project Settings -&gt; Player. In the Android options you will find the Package Name setting: </p> <p></p> <p>For more info on how to choose a package name checkout Google Documentation.</p> <p>The second thing you need to have is a keystore, you need to sign your game before submitting it to the store, you can get more info on Google documentation about this topic.</p> <p>After creating your keystore, you need to get SHA-256 certificate fingerprint, to do that just run the following command on your terminal (note the keytool comes with the Java SDK) :</p> <pre><code>keytool -list -v -keystore mystorekeystore.keystore\n</code></pre> <p>Running this command should yield something similar to the following image: </p> <p>With the package name and SHA-256 certificate fingerprint, you can finally create the digital asset link file, the filename should be assetlinks.json</p> <p><pre><code>[{\n\"relation\": [\"delegate_permission/common.handle_all_urls\"],\n\"target\": {\n\"namespace\": \"android_app\",\n\"package_name\": \"[MY_APP_PACKAGE_NAME]\",\n\"sha256_cert_fingerprints\": [\"[SHA256_FINGERPRINT_FROM_KEYTOOL]\"]\n}\n}]\n</code></pre> Finally you need to host the file on your website, it needs to be available on the root or .well-known directory.</p> <pre><code>https://&lt;your_domain&gt;/.well-known/assetlinks.json\n\nor\n\nhttps://&lt;your_domain&gt;/assetlinks.json\n</code></pre> <p>You can check Sudoku Zenkai and Loyca digital asset link on the following links:</p> <p>https://sudokuzenkai.imaginationoverflow.com/assetlinks.json</p> <p>https://loyca.imaginationoverflow.com/.well-known/assetlinks.json</p> <p>These files have optional configurations that you can use, for more info about these configurations check the official documentation.</p> <p>Note: You can get the production SHA-256 certificate fingerprint on your Google Play Console account, just navigate to Release Management -&gt; App signing and </p>"},{"location":"DomainAssociation/#windows-uwp-uri-handling","title":"Windows UWP - Uri Handling","text":"<p>To enable Domain Association on UWP you need to reserve a game name on the Windows Dev Center dashboard, to do that you can follow the oficial documentation.</p> <p>After you reserve your game name, you will need to go into the game settings under the Windows Dev Center dashboard, App Management -&gt; App identity:</p> <p></p> <p>From there you can check your game Package Family Name, just as seen in the picture above.</p> <p>With it, you need to create a json file named windows-app-web-link (no extension) and upload it to your website, under the root or .well-know directory.</p> <pre><code>[{\n\"packageFamilyName\": \"[YOUR_PACKAGE_FAMILY_NAME]\",\n\"paths\": [ \"*\" ],\n\"excludePaths\" : [ ]\n}] </code></pre> <p>For some examples check out Sudoku Zenkai and Loyca windows-app-web-link files:</p> <p>https://sudokuzenkai.imaginationoverflow.com/windows-app-web-link</p> <p>https://loyca.imaginationoverflow.com/windows-app-web-link</p> <p>You can set up other configurations on windows-app-web-link for more info check the official documentation.</p> <p>Finally, it's mandatory that your website supports HTTPS, because the windows will make an HTTPS request to try to retrieve the link.</p>"},{"location":"DomainAssociation/#notes","title":"Notes","text":"<ul> <li>The domain association feature only works for iOS, Android, and Windows (UWP).</li> <li>At ImaginationOverflow we are using Cloud Flare free tier service to enable HTTPS on all our domains.</li> </ul>"},{"location":"Faq/","title":"FAQ","text":""},{"location":"Faq/#what-are-the-differences-between-the-regular-and-the-pro-version","title":"What are the differences between the regular and the pro version?","text":"<p>The pro version includes the source code and contains the Windows automatic launcher system which enables your projects to mimic mobile deep link control (activation after the app is launched) out of the box without a single line of code. This feature also enable direct deep linking testing on the Unity editor on Windows (Mac support coming soon).</p>"},{"location":"Faq/#how-to-do-redirect-to-store-when-appgame-isnt-installed","title":"How to do redirect to store when app/game isn't installed?","text":"<p>To achieve the redirect to store when the app isn\u2019t installed, you need two things, a website, and an app with Domain Association and deep linking. When the user clicks on a web link if the app is installed it will automatically open the app. If the app isn\u2019t installed, or the user chooses to open the link in the browser (both android and ios allow such choice) you can either:</p> <ol> <li>On your website automatically redirect the user to the store (not checking if the app is installed or not)</li> <li> <p>Try to check if the app is installed, to achieve it you will need to:</p> <p>a) Try to redirect the user to your app deep link (myapp://), if the user has the app installed, it will either open automatically or ask the user if he wants to open it </p> <p>b) If it fails (e.g use a 3 seconds timeout), redirect to the store </p> </li> </ol> <p>Warning</p> <p>This deep link behaviour can vary depending on the target platform and browser!</p>"},{"location":"Faq/#my-domain-association-isnt-working","title":"My domain association isn't working.","text":"<p>There are a couple of reasons why domain association can fail:</p> <ol> <li>Your website is not https, both Google and Apple require your website to be https</li> <li>Your apple-app-site-association (AASA) or assetlinks file isn't being served without redirects. Vendors require that your configuration file to be served without any redirects, in order to test this you can use any online http tool (e.g reqbin.com)</li> <li>Your AASA file has incorrect appID configuration, double check it.</li> <li>Your assetlinks file has incorrect sha256_cert_fingerprints or package_name configuration.</li> <li>Your plugin integration is malfunctioning (although rare), to ensure that everything is working as expected, configure the plugin with a deep link and test it on an device.</li> </ol>"},{"location":"Faq/#my-app-opens-when-i-click-a-linkweb-link-but-nothing-happens","title":"My app opens when I click a link/web link but nothing happens.","text":"<p>The best way to double check everything, is run our demo scene on your target device and see if the activations appear as expected. In order to do this simply drag our scene to the Build Settings -&gt; Scenes in Build, and place the Demo scene in the first position. This step is important since it ensures that the integration is working as expected. Possible issues that can cause this on your code are:</p> <ol> <li>The GameObject where you are making the LinkActivated registration is destroyed before any activation occurrs. We suggest you to do this configurations on DontDestroyOnLoad GameObjects.</li> <li>The GameObject where you are making the LinkActivated registration is yet to be created, to ensure this does not happen, place the event registration at your application boot phase. (Do note that the plugin caches the last request, so you can delay the activation as much as you wish).</li> <li> <p>Your code is throwing an exception on the LinkActivated handler and it's failing silently, the plugin protects the handler activation with a try/catch block to avoid crashes, double check your logs, common issues we found throughout the years are:</p> <p>a) Trying to access a query string that doesn't exist.</p> <p>b) The GameObject not being ready to process a LinkActivated handler call, note that the plugin can fire the activation at the moment you register an handler if there is any requests cached.</p> </li> </ol>"},{"location":"Faq/#my-mac-build-isnt-working-modulelibrary-not-found-on-the-logs","title":"My Mac build isn't working, module/library not found on the logs","text":"<p>If you are building via xcode, double check that the UniversalDeepLink.framework is present on the Build Phases -&gt; Link Binary with Libraries. If not extract the zip under Assets\\Plugins\\ImaginationOverflow\\UniversalDeepLinking\\libs\\Standalone\\UniversalDeepLink.framework.zip to your xcode solution folder and add it to the linked libraries. Although rare this can happen on recently released xcode versions or when something fails(e.g missing permission) in the plugin automatic process.</p> <p>If you are building directly on Unity on a Mac, it's probably an optool issue (the tool we use to inject the library on your app),Assets\\Plugins\\ImaginationOverflow\\UniversalDeepLinking\\libs\\Tools\\optool. Ensure that the utility has execution permissions (on a terminal chmod +x optool) and on newer macOs versions follow this guide to allow unidentified apps to run</p>"},{"location":"Faq/#signing-on-macos","title":"Signing on macOS","text":"<p>Our framework isn't signed for security and compatability reasons, so when you are submitting your project for apple store will be required to sign the UniversalDeepLink.framework.</p>"},{"location":"Faq/#my-deep-link-domain-association-isnt-working-on-app-x","title":"My deep link, domain association isn't working on app X","text":"<p>The plugin works by registering your apps, on the target operating system, as a way to process some links (deep links or web links), there are cases of apps that open links internally on custom web views. These web views resolve any links internally not asking the target operating system on the best app to handle them. On these situations the plugin won't work as expected because the app X is bypassing the contract that allow deep linking and domain association to exist. Unfortunately, neither you or we can do anything regarding these situations. </p>"},{"location":"Faq/#change-the-open-with-io-launcher-on-windows-standalone-with-launcher","title":"Change the \"Open with IO Launcher\" on Windows Standalone with launcher","text":"<p>When you open a deep link on a Windows standalone target, the browsers will use the metadata of the launcher to prompt the user if he wants to open your product. For example, in chrome it will prompt <code>Open IO Launcher</code>. To change this prompt you have two alternatives:</p> <ol> <li>Use the launcher source included in the plugin to make a new launcher with your custom metadata.</li> <li>Use the Resource Hacker tool and change the File description property.</li> </ol> <p>After you changed the launcher by either one of the above options, make a new build to a new target folder or simply change your target folder name. This will force the update of the launcher metadata.</p>"},{"location":"GettingStarted/","title":"Getting Started","text":""},{"location":"GettingStarted/#using-the-plugin","title":"Using the Plugin","text":"<p>The plugin uses a single event where you need to register in order to receive Deep Linking or Domain Association activations:</p> <p><pre><code>void Start()\n{\nImaginationOverflow.UniversalDeepLinking.DeepLinkManager.Instance.LinkActivated += Instance_LinkActivated;\n}\n\nprivate void Instance_LinkActivated(ImaginationOverflow.UniversalDeepLinking.LinkActivation s)\n{\n//\n//  my activation code\n//\n}\n</code></pre> Never forget to remove your event registration when the GameObject where you registered it is destroyed:</p> <pre><code>void OnDestroy()\n{\nImaginationOverflow.UniversalDeepLinking.DeepLinkManager.Instance.LinkActivated -= Instance_LinkActivated;\n}\n</code></pre> <p>The LinkActivated event will be triggered when your game is started or resumed by a Deep Link or Domain activation.</p> <p>The LinkActivated event single argument LinkActivation contains the Uri that triggered the game activation, a string with the raw Query String and a Dictionary with the query string already processed: </p> <pre><code>public class LinkActivation\n{\npublic string Uri { get; private set; }\n\npublic string RawQueryString { get; private set; }\n\npublic Dictionary&lt;string, string&gt; QueryString { get; private set; }\n}\n</code></pre> <p>Consider the following example:</p> <p><pre><code>private void Instance_LinkActivated(ImaginationOverflow.UniversalDeepLinking.LinkActivation linkActivation)\n{\nvar url = linkActivation.Uri;\nvar querystring = linkActivation.RawQueryString;\nvar qParameter = linkActivation.QueryString[\"q\"];\n}\n</code></pre> If Sudoku Zenkai is activated with the following link:</p> <p>https://sudokuzenkai.imaginationoverflow.com/puzzle?q=cMOiw5XDlsOXw5zDnMKl</p> <p>The variables values would be:</p> <ul> <li>url - https://sudokuzenkai.imaginationoverflow.com/puzzle?q=cMOiw5XDlsOXw5zDnMKl</li> <li>querystring - q=cMOiw5XDlsOXw5zDnMKl</li> <li>qParameter - cMOiw5XDlsOXw5zDnMKl</li> </ul> <p>If you have the game installed on your device right now, instead of using the site URI you can use the deep linking URI instead:</p> <p>sudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl</p> <p>You should be seeing the exact puzzle as seen below.</p> <p></p>"},{"location":"GettingStarted/#configuring-the-plugin","title":"Configuring the Plugin","text":"<p>The configuration interface is under Window -&gt; ImaginationOverflow -&gt; Universal DeepLink Configuration</p> <p></p> <p></p> <p>On some platforms, the operating system asks the player what app she wishes to use after clicking a custom URI, the Display Name allows you to configure what name will the OS show on that occasion. The Steam App Id is for Steam only games, you can read about Steam integration on its section.  The plugin allows you to configure the deep linking and domain association globally or per platform.</p> <p>Note</p> <p>The Standalone auto launcher features are exclusive to the Pro version  of the plugin.</p>"},{"location":"GettingStarted/#global-configuration","title":"Global Configuration","text":"<p>If you are using the same custom URIs and Domains for every platform, you only need to setup it once and the plugin will automatically propagate all data to all platforms as you build for them.</p> <p>To configure a Deep Link or a Domain Association you need to provide:</p> <ul> <li>Scheme - it can be anything you wish, remember to check the Stores for other apps or games that are also using an URI you wish to adopt (when configuring for deep linking), for domain association it's usually http, if your site supports https add another entry to the list. Note: if you are thinking on redirecting a user to a deep link on the web, the scheme should always be configured in lower-case.</li> <li>Host - this parameter is usually only used for domain association, here you should put the host of your website</li> <li>Path - some platforms support which paths the application should be activated, but usually this is accomplished using other configuration files see Domain Association.</li> </ul>"},{"location":"GettingStarted/#per-platform-configuration","title":"Per Platform Configuration","text":"<p>When you wish to override any configuration for a specific platform you can do that by clicking on the specific platform checkbox. After that, you just need to fill out the Deep Linking and Domain Association data or leave it empty if you do not wish to support these features for that specific platform. Note that by checking a platform none of the global configurations will be used for that specific platform.</p> <p></p> <p>In the example above, we've changed the Android Deep Linking scheme to sudokuzenkaidroid and disabled the Domain Association capability. The remaining platforms will continue to use the global configurations.</p>"},{"location":"GettingStarted/#testing","title":"Testing","text":"<p>After your game is deployed to a device, you can test the integration simply by clicking on a configured URI on any app or website. As an example, you can send yourself a message (on any messaging app) or an email with the proper URI.</p>"},{"location":"GettingStarted/#editor","title":"Editor","text":"<p>Warning</p> <p>The editor debug window and direct deep link mock a link activation on the Unity editor, it bypasses any native platform integration and configuration.</p>"},{"location":"GettingStarted/#pro-only-direct-deep-link-testing","title":"[Pro Only] Direct deep link testing","text":"<p>In the plugin configuration window if you decide to enable Use for Unity debugging, the plugin will automatically redirect any configured deep link activations on your machine to the editor, enabling you to test the entire flow of information (for example OAuth flow) directly in the editor, without any further configuration. You can also use the run command in order to manually trigger deep links on your machine. The plugin will route them directly to your Unity Editor.</p> <p>Warning</p> <p>If you are working on Windows builds, the editor will replace the configuration of your already built game. To reconfigure the deep links simply open your game again.</p>"},{"location":"GettingStarted/#debug-window","title":"Debug Window","text":"<p>We included a simple interface where you can test your deep linking activation without deploying, you can insert any valid and invalid URIs in order to test your integration. </p> <p></p> <p>When you press Debug, the LinkActivated will be triggered and your callback called if the application is running in the editor. To simplify iteration we also store the last called deep/web links in order to streamline testing.</p>"},{"location":"GettingStarted/#on-a-device","title":"On a Device","text":"<p>Testing in a device can be done in many different ways, via messaging apps, email apps, etc. We recommend to use our online Test Tool, to use it simply follow the steps:</p> <ol> <li>On the device you wish to test open our Test Tool</li> <li>Type the deep link or web link you wish to test on the text box</li> <li>Click Create</li> <li>Click on Test</li> </ol> <p>After step 3 the website will update its url with the target test link information, making it easier to share test between team members or devices.</p>"},{"location":"GettingStarted/#iostvos","title":"iOS/tvOS","text":""},{"location":"GettingStarted/#simulator","title":"Simulator","text":"<p>After your game is installed on a simulator, open a terminal and run the following command:</p> <pre><code>xcrun simctl openurl booted \"[MY_URI_HERE]\"\n</code></pre> <p>Examples</p> <pre><code>xcrun simctl openurl booted \"sudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl\"\n</code></pre> <pre><code>xcrun simctl openurl booted \"https://sudokuzenkai.imaginationoverflow.com/puzzle?q=cMOiw5XDlsOXw5zDnMKl\"\n</code></pre>"},{"location":"GettingStarted/#android","title":"Android","text":"<p>Open a terminal on your development machine, open a terminal (console or powershell) and run the command:</p> <pre><code>adb shell am start -W -a android.intent.action.VIEW -d \"[MY_URI_HERE]\"\n</code></pre> <p>Examples</p> <pre><code>adb shell am start -W -a android.intent.action.VIEW -d \"sudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl\"\n</code></pre> <pre><code>adb shell am start -W -a android.intent.action.VIEW -d \"https://sudokuzenkai.imaginationoverflow.com/puzzle?q=cMOiw5XDlsOXw5zDnMKl\"\n</code></pre>"},{"location":"GettingStarted/#windows-10","title":"Windows 10","text":"<p>You can use windows run program to test your integration, just click on the Windows Button and R and place your URI on the command option and press Ok.  </p>"},{"location":"GettingStarted/#macos","title":"MacOS","text":"<p>Open up a terminal and use the Open command: <pre><code>open  [MY_URI_HERE]\n</code></pre></p> <pre><code>open  sudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl\n</code></pre>"},{"location":"GettingStarted/#linux","title":"Linux","text":"<p>On Linux you can use the xdg-open command to test your integration, open up a terminal and run the following command.</p> <pre><code>xdg-open  [MY_URI_HERE]\n</code></pre> <pre><code>xdg-open  sudokuzenkai://puzzle?q=cMOiw5XDlsOXw5zDnMKl\n</code></pre>"},{"location":"GettingStarted/#standalone-caveats","title":"Standalone Caveats","text":""},{"location":"GettingStarted/#build-for-macos","title":"Build for MacOS","text":"<p>If you make your Mac builds on MacOS the plugin will automatically configure everything that is required in order for it to work correctly. But if you make your MacOs build on Windows you will need to do some extra steps in order to fully configure your build to receive deep link activations. Due to Unity limitations, you will need a Mac or a MacOs VM in order to completely use the plugin capabilities.</p>"},{"location":"GettingStarted/#building-for-macos-on-windows","title":"Building for MacOS on Windows","text":"<p>When the build is completed you will note that the build process created an extra folder named UniversalDeepLinkingScripts. This folder contains all tools required to correctly finish up the plugin configuration:</p> <ol> <li>Copy the UniversalDeepLinkingScripts and your deliverable (you_game.app) to your Mac or VM.</li> <li>Open a Terminal and navigate to the copied items location.</li> <li>Run the setup.sh script: <pre><code>./setup.sh\n</code></pre></li> </ol> <p>If everything goes as expected you should see something similar to the following image: </p> <p>For more information on why you need to do this extra step check our Inside the Plugin Section.</p>"},{"location":"GettingStarted/#linux-and-windows","title":"Linux and Windows","text":"<p>On Windows and Linux standalone builds, the Deep Linking is only configured when the game runs the first time, so even if the player has the game installed on his machine, if he didn't play at least one time, the Deep Linking connection won't activate the game.</p> <p>Windows and Linux builds also only allow players to start your game via a deep link if the player clicks on a deep link after your game is already open the plugin won't react to this new activation. The Pro version includes an option that works around this issue.</p> <p>For further details on why this happens, and how to work around it you can check our Inside the Plugin Section.</p>"},{"location":"GettingStarted/#notes","title":"Notes","text":"<ul> <li>If you don't own a mac you can always create a Mac VM</li> <li>If you are targetting a platform that the plugin doesn't support, you will find that building to an unsupported platform will yield an error stating that the assembly ImaginationOverflow.UniversalDeepLinking.Platform.dll is not present. To fix this you will find a dummy assembly under Assets\\Plugins\\ImaginationOverflow\\UniversalDeepLinking\\libs\\Dummy, configure it to be included on the unsupported platform that you are targetting and the error should be fixed.</li> </ul>"},{"location":"Internals/","title":"Inside the Plugin","text":"<p>On this section, we talk a little on how the plugin works on each platform and explain why it has some caveats on some platforms. </p>"},{"location":"Internals/#overview","title":"Overview","text":"<p>The plugin content can be found inside the folder Plugins/ImaginationOverflow/UniversalDeepLinking, making easy to install and update when required. </p> <p>We included a simple Demo scene that allows you to test and play with the plugin before integrating it in your game.</p> <p>Inside the libs folder os all the required dlls in order for the plugin to work:</p> <ul> <li>ImaginationOverflow.UniversalDeepLinking.dll - Contains the public API of the plugin</li> <li>.Core.dll - Contains the core elements of the plugin</li> <li>.Editor.dll - Contains the windows and user interface of the plugin</li> <li>.Platform.dll - Contains the specific implementation for each platform, Android, iOS, UWP and Standalone.</li> </ul> <p>The Tools folder contains external tools that the plugin requires in order to work correctly, right now, the only external tool we are using is optool, required for MacOs builds.</p> <p>The plugin configurations are saved under Resources/ImaginationOverflow/UniversalDeepLink, facilitating the use of source control systems on development. This file is also required on some build targets at runtime, reason why it's directly under the Resources folder.</p>"},{"location":"Internals/#runtime","title":"Runtime","text":"<p>At runtime the plugin creates a single GameObject and adds it to your current scene, this GameObject purpose is to ensure that all activation callbacks are called inside Unity main thread as well as propagate the pause events of the game to the plugin. The latter enables the plugin to refresh the activation data on some mobile platforms.</p>"},{"location":"Internals/#android","title":"Android","text":"<p>The plugin handles all manifest registrations when you make a build, the plugin doesn't override the default activity enabling it to work with the most used plugins in the Asset Store. The Deep Linking and Domain Association activation is checked everytime the game is opened or resumed.</p>"},{"location":"Internals/#iostvos","title":"iOS/tvOS","text":"<p>The iOS integration uses a static library libUniversalDeepLink.a in order to receive information about the app activation. Just like on Android the plugin handles all registrations on info.plist and entitlements files. The library included in the plugin notifies it everytime the game was opened via deep link or domain association activation.</p>"},{"location":"Internals/#windows-uwp-windows-store-games","title":"Windows UWP (Windows Store Games)","text":"<p>Just like the previous mobile platforms, the plugin automatically configures the Package.appxmanifest file with your configuration. </p> <p>In order for the plugin to work it edits the OnActivated event under App.xaml.cs, App.xaml.cpp or App.cpp depending on what Build Type (Xaml or D3D) and Scripting Backend (.NET or IL2CPP) you configure. The plugin should also work on Xbox UWP games but it was impossible to test on an actual console in order to get confirmation.</p>"},{"location":"Internals/#linux-and-windows","title":"Linux and Windows","text":"<p>In Linux the deep link registration is done the first time the player opens the game. To accomplish this the plugin creates a Desktop File on the player machine, enabling the operating system to set up the game as a target of a custom protocol. </p> <p>On Windows, the game writes in the registry the information necessary to enable the OS to open the game every time the player clicks on a configured deep link URI.</p> <p>The protocol registration is also done everytime the Application.version is changed, enabling you to change the configuration with an update. </p> <p>If the game build is for Steam, the plugin configures Steam to be the target of your custom URI instead of the game (this is done to work around DRM) but configures Steam to launch your game with the Uri that opened steam.</p> <p>Linux and Windows builds (Steam or Standalone) can't be activated via a Deep Link after the game is already running. This is because the link activation information is passed via argument on the main function, making it impossible to get information of the activation link after the game is already running. To work around this issue check the section below</p>"},{"location":"Internals/#standalone-activation-after-launch","title":"Standalone activation after launch","text":"<p>Note</p> <p>The Pro version of the plugin includes an integrated launcher which you can activate on the plugin configuration window. The integration is transparent and you don't need to any change to your integration after you activate it. Steam support is also implemented!</p> <p>It's possible to work around the activation issue. In order to do that it's required that another application (Launcher application) is registered as the target for the deep link and that activation is responsible to launch or notify your app or game. So instead of the normal activation flow:</p> <p></p> <p>It will run like the following</p> <p></p> <p>The Launcher application is not included in the plugin for security and liability reasons, so you would need to develop it yourself and include it on your game/app final package.  We do however have an API for enabling this kind of behavior.</p> <p>First off, you would need to register the launcher application instead of your app/game as the target application for the plugin, in order to facilitate that we enable you to override what we register as the deep link target, your app/game executable or another application.</p> <p>In order to do that, before you register your callback on the LinkActivated event you need to set the DeferredExePath field with the full path of the application.</p> <pre><code>#if UNITY_STANDALONE_LINUX || UNITY_STANDALONE_WIN\nImaginationOverflow.UniversalDeepLinking.LinkProviderFactory.DeferredExePath = \"&lt;Launcher application full path&gt;\";\n#endif\nImaginationOverflow.UniversalDeepLinking.DeepLinkManager.Instance.LinkActivated += Instance_LinkActivated;\n</code></pre> <p>Then you need to implement a bridge between the Launcher application and your app/game, for this situation any common Inter Process Communication tools or APIs can be used, you can as an example use, Files, Sockets or Pipes.</p> <p>Using the file polling as an example, the launcher application would write the activation URI on a file that both the launcher and your app/game knows. The game would then on set intervals check if a specific file was changed when it was changed the app/game would read it in order to get the activation URI. After getting the URI the app/game could use our manual trigger API in order to activate the LinkActivated event:</p> <pre><code>while(true)\n{\nif(&lt;file was modified&gt;)\n{\nstring fileContent = System.IO.File.ReadAllText(&lt;file path&gt;);\nImaginationOverflow.UniversalDeepLinking.DeepLinkManager.Instance.ManuallyTriggerDeepLink(fileContent);\n}\n}\n</code></pre> <p>The launcher application needs to check if the app/game is open or not before deciding which method it would use in order to send the activation data to it. If the application is not running, you can simply launch it and pass the activation URI as an argument. If the app/game is already running, you need to IPC in order to send information to the running app/game. Using the file polling example again, the launcher application code can be something like:</p> <pre><code>void Main(string[] args)\n{\nif(args.Length == 0)\nreturn;\n\n//  Get the activation uri.\nvar uri = args[0];\n\n//  Check if your app/game is running\nif(Process.GetProcessesByName(\"&lt;your app/game&gt;\").Length == 0)\n{\n//if not simply launch it with the activationUri as argument\nProcess p = new Process();\np.StartInfo = new ProcessStartInfo(\"&lt;path to app/game executable&gt;\", uri);\np.Start();\n}\nelse\n{   //\n//  Write in the share file the uri so that the app/game can extract it\n//\nFile.WriteAllText(\"&lt;Path to shared file between launcher and game&gt;\", uri);\n}\n\n}\n</code></pre>"},{"location":"Internals/#mac","title":"Mac","text":"<p>All manifest registrations are handled by the plugin, the deep linking activation is deferred from our library into the game as it happens, so MacOs builds won't have the caveats that Windows and Linux have.</p> <p>In order to support Deep Linking we had to make a library (UniversalDeepLink.framework) that would intercept the activation events of the application itself since Unity doesn't allow the plugin to automatically link a library on the build process it must be done after the build. To make that possible the plugin includes the tool optool. </p> <p>optool allow us to inject the library into the game and collect all the activation events. If you build your game on MacOs the plugin will automatically call optool and inject the library. If you make the build on any other OS you will need to make an extra step, just has explained on the Getting Started Section. </p> <p>This requirement exists because optool was made for MacOs and the team couldn't in useful time port it to Windows.</p> <p>For more info about how the library injection works check here.</p>"},{"location":"Showcase/","title":"Showcase","text":"<p>Did you integrate the Universal Plugin in your game? Let us know and we will add it to the site and this list.</p>"},{"location":"Showcase/#sudoku-zenkai","title":"Sudoku Zenkai","text":"<p>|| Android || iOS || Microsoft Store || Steam ||</p> <p>|| Website || Twitter || Facebook ||</p>"},{"location":"Showcase/#super-bunny-laser-spikes","title":"Super Bunny Laser Spikes","text":"<p>|| Android || iOS || Microsoft Store ||</p> <p>|| Website || Twitter || Facebook ||</p>"},{"location":"SteamIntegration/","title":"Steam Integration","text":"<p>Regular Standalone Deep Linking opens up your game when someone clicks on a custom defined URI. But if your game is on Steam you are probably using its SDK or DRM capabilities to further enhance your players' experience.</p> <p>If you open a Steam game from its installation folder, since it wasn't open via steam it probably won't be able to communicate with valve software in order to report achievements, stats, etc, or it won't simply launch due to the DRM feature.</p> <p>So using the regular Deep Linking mechanism where we associate a custom URI to a game executable wouldn't work since the game would possibly lose functionality or simply wouldn't start.</p> <p>To avoid this issue, instead of registering your game to your custom URI, we configure the target systems to open steam instead of your game, but we parameterize Steam to open your game as soon as it's initialized.</p>"},{"location":"SteamIntegration/#configuring-steam-integration","title":"Configuring Steam Integration","text":"<p>To enable the Steam capability of ImaginationOverflow Deep Linking Plugin you first need to have a valid app id, for that you need to get access to Steam Direct. After that valve will attribute to your game an ID.</p> <p></p> <p>As an example, Sudoku Zenkai id is 809850. </p> <p>Then you need to configure the plugin with this id:</p> <p></p> <p>The final step of the configuration to enable the Steam integration is setting the IsSteamBuild Property under DeepLinkManager:</p> <pre><code>ImaginationOverflow.UniversalDeepLinking.DeepLinkManager.Instance.IsSteamBuild = true;\n</code></pre> <p>If your game is on Steam there is a good chance that you offer DRM-free versions of it on other stores, so don't forget to turn off this option when making DRM-free standalone builds, a good way to do this automatically is using compilation flags.</p> <pre><code>#if STEAM_BUILD\nImaginationOverflow.UniversalDeepLinking.DeepLinkManager.Instance.IsSteamBuild = true;\n#else\nImaginationOverflow.UniversalDeepLinking.DeepLinkManager.Instance.IsSteamBuild = false;\n#endif\n</code></pre>"},{"location":"SteamIntegration/#mac-and-steam-integration","title":"Mac and Steam Integration","text":"<p>Mac Deep Linking works a little different from the Windows and Linux, you have to take special care when integrating the plugin with Mac and Steam. On Linux and Windows, the plugin handles the registration of the Deep Link when the game is first open. This enables the plugin to register whatever it wants on these platforms. On Mac, the Deep Link feature is fully controlled by the OS and the plugin can't change the default configuration, which opens your game directly.</p> <p>The OS itself doesn't know that is running a Steam game, so when the user clicks on a custom URI, the OS opens the game executable. This means that you need to explicitly delay the enforcement of the DRM until you know if the game was activated via Deep Linking or not.</p> <p>The plugin is configured in a way that when it's running a Steam game on MacOS it will always fire the LinkActivated event even if the game wasn't activated via Deep Link. This way is possible to store the Deep Link before enforcing any DRM in the game. </p>"},{"location":"SteamIntegration/#solution-suggestion","title":"Solution Suggestion","text":"<p>Below is the code that we use on Sudoku Zenkai to handle this tricky issue, for Steam integration we are using Steamworks.NET.</p> <p>The user flow for this situation is the following:</p> <ol> <li>User clicks on a Deep Link.</li> <li>The game opens</li> <li>The game enforces DRM and launches the game on Steam.</li> <li>Steam launches (if not already running).</li> <li>Steam launches the game.</li> </ol> <p>To ensure that we process the Deep Link that the user initially clicked we need to save it before enforcing the DRM, in the code below we do exactly that:</p> <ol> <li>The game is activated via Deep Link.</li> <li>The LinkActivated event is triggered.</li> <li>Save the link information (since it's impossible to have the game launch on steam via Deep Link)</li> <li>Check if the game has steam access, if not restart.</li> <li>If we are already on steam, load the previously saved Deep Link</li> <li>Resume Deep Link activation.</li> </ol> <p>This behavior is only possible because the plugin always triggers the LinkActivated event (on Steam Mac builds) regardless if it was activated via a Deep Link or not.</p> <pre><code>    public void RegisterForActivation()\n{\n#if UNITY_STANDALONE_OSX &amp;&amp; STEAM_BUILD\nDeepLinkManager.Instance.LinkActivated += SteamOsxActivation;\n#else\nDeepLinkManager.Instance.LinkActivated += Instance_LinkActivated;\n#endif\n}\n\nprivate void SteamOsxActivation(LinkActivation s)\n{\n//\n//  On Steam OSX builds the plugin triggers the LinkActivated with the  \n//  deep link data or with a null Uri if it wasn't activated \n//  via Deep Linking\n//\nif (string.IsNullOrEmpty(s.Uri) == false)\nYourGameStorage.SaveDeepLinkActivation(s);\n\n//\n//  Enforce DRM\n//\nif (Steamworks.SteamAPI.RestartAppIfNecessary(new Steamworks.AppId_t([YourAppId])))\n{\nApplication.Quit();\nreturn;\n}\n\n//\n//  We are already running on Steam, so load any saved deep linking \n//  activations\n//\ns = YourGameStorage.LoadDeepLinkActivation();\n\nif (s == null)\nreturn;\n\n//\n//  Clear the activation ensuring that the game won't be activated again \n//  with the same uri this depends on your storage infrastructure.\n//  \nYourGameStorage.ClearDeepLinkActivation();\n\n//\n//  Process deep link activation\n//\nInstance_LinkActivated(s);\n}\n</code></pre> <p>This behavior only happens when the game is running on Mac and you set the Steam flag to true, on the other combinations the plugin only fires the LinkActivated event in case of an actual activation.</p>"}]}