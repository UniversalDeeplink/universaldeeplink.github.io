{
    "docs": [
        {
            "location": "/", 
            "text": "How to use\n\n\n\n\nWhat is deep linking and Url asscoiation\n\n\nInstall\n\n\nReferencing\n\n\nConfiguring (global and per plat)\n\n\nHow to test\n\n\nStandalone considerations\n\n\n\n\nConfiguring your website for Domain Association (Universal Links, App links, Uri handling)\n\n\n\n\niOS\n\n\nAndroid\n\n\nUWP\n\n\n\n\nDeep dive\n\n\n\n\nDlls content\n\n\nHow it works in game\n Droid, ios, standalone, mac\n\n\n\n\nDeeplinking and URI association\n\n\n\n\nAndroid\n\n\nios\n\n\nUWP\n\n\nWindows\n\n\nLinux\n\n\nMac\n\n\n\n\nSteam Integration\n\n\n\n\nhow to integrate\n\n\nStandalone vs Steam standalone\n\n\nMac issue", 
            "title": "Home"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "What is deep linking and Url asscoiation  Install  Referencing  Configuring (global and per plat)  How to test  Standalone considerations", 
            "title": "How to use"
        }, 
        {
            "location": "/#configuring-your-website-for-domain-association-universal-links-app-links-uri-handling", 
            "text": "iOS  Android  UWP", 
            "title": "Configuring your website for Domain Association (Universal Links, App links, Uri handling)"
        }, 
        {
            "location": "/#deep-dive", 
            "text": "Dlls content  How it works in game\n Droid, ios, standalone, mac", 
            "title": "Deep dive"
        }, 
        {
            "location": "/#deeplinking-and-uri-association", 
            "text": "Android  ios  UWP  Windows  Linux  Mac", 
            "title": "Deeplinking and URI association"
        }, 
        {
            "location": "/#steam-integration", 
            "text": "how to integrate  Standalone vs Steam standalone  Mac issue", 
            "title": "Steam Integration"
        }, 
        {
            "location": "/HowToUse/", 
            "text": "Preface\n\n\nImaginationOverflow Universal Deep Linking plugin enables your games to use \nDeep Linking\n and \nDomain Association\n in iOS, Android, Windows 10 (UWP), Standalone (Linux, Mac, and Windows).\n\n\nDeep Linking\n \"\nconsists of using a uniform resource identifier (URI) that links to a specific location within a mobile app rather than simply launching the app.\n\" (\nMobile deep linking @ Wikipedia\n)\n\n\nDomain Association\n is a similar feature but instead of using custom URIs (\nmycustomuri://somecontent\n) it utilizes  \nWeb URIs\n (\nwww.mydomain/somecontent\n) to directly open your games on a specific location\n\n\nEach mobile platform has a specific name for this feature, \niOS\n calls it \nUniversal Links\n, \nAndroid\n has its \nApp links\n and \nWindows 10\n named it \nUri handling\n, througtout this documentation we will refering the ability to associate a web URI with your game as \nDomain Association\n.\n\n\nWe will be using our game \nSudoku Zenkai\n (\niOS\n, \nAndroid\n, \nWindows 10\n and \nSteam\n) as a use case throughout this documentation. Anyone that purchases the plugin in entitled to a free Steam key to check a live example of this plugin usage, to get it just contact us on our \nDiscord channel\n or via \nmail\n\n\nUniversal Deep Linking plugin enables your games to use \nDeep Linking\n on iOS, Android, Windows (UWP), Windows, Mac, Linux and Steam (Linux, Mac, and Windows). \n\n\nCurrently, the plugin supports \nDomain Association\n to iOS, Android and Windows UWP (Mobile, Tablet, and Desktop).\n\n\nUsing the Plugin\n\n\nThe plugin uses a single event where you need to register in order to receive Deep Linking or Domain Association activations:\n\n\nvoid\n \nStart\n()\n\n\n{\n\n    \nImaginationOverflow\n.\nUniversalDeepLinking\n.\nDeepLinkManager\n.\nInstance\n.\nLinkActivated\n \n+=\n \nInstance_LinkActivated\n;\n\n\n}\n\n\n\nprivate\n \nvoid\n \nInstance_LinkActivated\n(\nImaginationOverflow\n.\nUniversalDeepLinking\n.\nLinkActivation\n \ns\n)\n\n\n{\n\n    \n//\n\n    \n//  my activation code\n\n    \n//\n\n\n}\n\n\n\n\n\n\nNever forget to remove your event registration when the \nGameObject\n where you registered it is \ndestroyed\n:\n\n\n1\n2\n3\n4\nvoid\n \nOnDestroy\n()\n\n\n{\n\n    \nImaginationOverflow\n.\nUniversalDeepLinking\n.\nDeepLinkManager\n.\nInstance\n.\nLinkActivated\n \n-=\n \nInstance_LinkActivated\n;\n\n\n}\n\n\n\n\n\n\n\nThe \nLinkActivated\n event will be triggered when your game is \nstarted\n or \nresumed\n by a Deep Link or Domain activation.\n\n\nThe \nLinkActivated\n event single argument \nLinkActivation\n contains the Uri that triggered the game activation, a string with the raw \nQuery String\n and a Dictionary with the query string already processed: \n\n\n1\n2\n3\n4\n5\n6\n7\n8\npublic\n \nclass\n \nLinkActivation\n\n\n{\n\n    \npublic\n \nstring\n \nUri\n \n{\n \nget\n;\n \nprivate\n \nset\n;\n \n}\n\n\n    \npublic\n \nstring\n \nRawQueryString\n \n{\n \nget\n;\n \nprivate\n \nset\n;\n \n}\n\n\n    \npublic\n \nDictionary\nstring\n,\n \nstring\n \nQueryString\n \n{\n \nget\n;\n \nprivate\n \nset\n;\n \n}\n\n\n}\n\n\n\n\n\n\n\nConsider the following example:\n\n\n1\n2\n3\n4\n5\n6\nprivate\n \nvoid\n \nInstance_LinkActivated2\n(\nImaginationOverflow\n.\nUniversalDeepLinking\n.\nLinkActivation\n \nlinkActivation\n)\n\n\n{\n\n    \nvar\n \nurl\n \n=\n \nlinkActivation\n.\nUrl\n;\n\n    \nvar\n \nquerystring\n \n=\n \nlinkActivation\n.\nRawQueryString\n;\n\n    \nvar\n \nqParameter\n \n=\n \nlinkActivation\n.\nQueryString\n[\nq\n];\n\n\n}\n\n\n\n\n\n\n\nIf Sudoku Zenkai is activated with the following link:\n\n\nhttps://sudokuzenkai.imaginationoverflow.com/dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\nThe variables values would be:\n\n\n\n\nurl\n - https://sudokuzenkai.imaginationoverflow.com/dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\nquerystring\n - q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\nqParameter\n - ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\n\n\nIf you have the game installed on your device right now, instead of using the site URI you can use the deep linking URI instead:\n\n\nsudokuzenkai://dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\nYou should be seeing the exact puzzle as seen below.\n\n\n\n\nConfiguring the Plugin\n\n\nThe configuration interface is under \nWindow\n -\n \nImaginationOverflow\n -\n \nUniversal DeepLink Configuration\n\n\n\n\n\n\nOn some platforms, the operating system ask the player what app she wishes to use after clicking a custom URI, the \nDisplay Name\n allows you to configure what name will the OS show on that occasion.\nThe \nSteam App Id\n is for Steam only games, you can read about Steam integration is [INSERT STEAM DOCUMENTATION HERE]. \nThe plugin allows you to configure the deep linking and domain association globally or per platform.\n\n\nGlobal Configuration\n\n\n\n\nIf you are using the same custom URIs and Domains for every platform, you only need to setup it once and the plugin will automatically propagate all data to all platforms as you build for them.\n\n\nTo configure a Deep Link or a Domain Association you need to provide:\n\n\n\n\nScheme\n - it can be anything you wish, remember to check the Stores for other apps or games that are also using an URI you wish to adopt (when configuring for deep linking), for domain association it's usually \nhttp\n, if your site supports \nhttps\n add another entry to the list.\n\n\nHost\n - this parameter is usually only used for domain association, here you should put the host of your website\n\n\nPath\n - some platforms support which \npaths\n the application should be activated, but usually this is accomplished using other configuration files see [DOMAIN ASSOCIATION CONFIG FILES].\n\n\n\n\nPer Platform Configuration\n\n\nWhen you wish to override any configuration for a specific platform you can do that by clicking on the specific platform checkbox. After that, you just need to fill out the Deep Linking and Domain Association data or leave it empty if you do not wish to support these features for that specific platform. Note that by checking a platform none of the global configurations will be used for that specific platform.\n\n\n\n\nIn the example above, we've changed the \nAndroid\n Deep Linking \nscheme\n to \nsudokuzenkaidroid\n and disabled the Domain Association capability. The remaining platforms will continue to use the global configurations.\n\n\nTesting\n\n\nAfter your game is deployed to a device, you can test the integration simply by clicking on a configured URI on any app or website. As an example, you can send yourself a message (on any messaging app) or an email with the proper URI.\n\n\nEditor\n\n\n\n\nWe include a simple interface where you can test your deep linking activation without deploying, you can insert any valid and invalid URIs in order to test your integration. \n\n\n\n\nWhen you press Debug, the LinkActivated will be triggered and your callback called if the application is running in the editor.\n\n\niOS\n\n\nSimulator\n\n\nAfter your game is installed on a simulator, open a terminal and run the following command:\n\n\n1\nxcrun simctl openurl booted \n[MY_URI_HERE]\n\n\n\n\n\n\n\nExamples\n\n\n1\nxcrun simctl openurl booted \nsudokuzenkai://dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\n\n\n\n\n\n1\nxcrun simctl openurl booted \nhttps://sudokuzenkai.imaginationoverflow.com/dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\n\n\n\n\n\nAndroid\n\n\nOpen a terminal on your development machine, open a terminal (console or powershell) and run the command:\n\n\n1\nadb shell am start -W -a android.intent.action.VIEW -d \n[MY_URI_HERE]\n\n\n\n\n\n\n\nExamples\n\n\n1\nadb shell am start -W -a android.intent.action.VIEW -d \nsudokuzenkai://dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\n\n\n\n\n\n1\nadb shell am start -W -a android.intent.action.VIEW -d \nhttps://sudokuzenkai.imaginationoverflow.com/dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==\n\n\n\n\n\n\n\nWindows 10\n\n\nYou can use windows run program to test your integration, just click on the \nWindows Button\n and \nR\n and place your URI on the command option and press \nOk\n. \n\n\n\nMac\n\n\nOpen up a terminal and use the \nOpen\n command:\n\n\n1\nopen  \n[\nMY_URI_HERE\n]\n\n\n\n\n\n\n\n1\nopen  sudokuzenkai://dailychallenge?q\n=\nZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA\n==\n\n\n\n\n\n\n\nLinux\n\n\nOn Linux you can use the xdg-open command to test your integration, open up a terminal and run the following command.\n\n\n1\nxdg-open  \n[\nMY_URI_HERE\n]\n\n\n\n\n\n\n\n1\nxdg-open  sudokuzenkai://dailychallenge?q\n=\nZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA\n==\n\n\n\n\n\n\n\nStandalone Considerations\n\n\nOn Windows and Linux standalone builds, the Deep Linking is only configured when the game runs the first time, so even if the player has the game installed on his machine, if he didn't play at least one time, the Deep Linking connection won't activate the game.\nFor further details on why this happens, you can check our Deep Dive section [INSERT LINK HERE]", 
            "title": "Getting Started"
        }, 
        {
            "location": "/HowToUse/#preface", 
            "text": "ImaginationOverflow Universal Deep Linking plugin enables your games to use  Deep Linking  and  Domain Association  in iOS, Android, Windows 10 (UWP), Standalone (Linux, Mac, and Windows).  Deep Linking  \" consists of using a uniform resource identifier (URI) that links to a specific location within a mobile app rather than simply launching the app. \" ( Mobile deep linking @ Wikipedia )  Domain Association  is a similar feature but instead of using custom URIs ( mycustomuri://somecontent ) it utilizes   Web URIs  ( www.mydomain/somecontent ) to directly open your games on a specific location  Each mobile platform has a specific name for this feature,  iOS  calls it  Universal Links ,  Android  has its  App links  and  Windows 10  named it  Uri handling , througtout this documentation we will refering the ability to associate a web URI with your game as  Domain Association .  We will be using our game  Sudoku Zenkai  ( iOS ,  Android ,  Windows 10  and  Steam ) as a use case throughout this documentation. Anyone that purchases the plugin in entitled to a free Steam key to check a live example of this plugin usage, to get it just contact us on our  Discord channel  or via  mail  Universal Deep Linking plugin enables your games to use  Deep Linking  on iOS, Android, Windows (UWP), Windows, Mac, Linux and Steam (Linux, Mac, and Windows).   Currently, the plugin supports  Domain Association  to iOS, Android and Windows UWP (Mobile, Tablet, and Desktop).", 
            "title": "Preface"
        }, 
        {
            "location": "/HowToUse/#using-the-plugin", 
            "text": "The plugin uses a single event where you need to register in order to receive Deep Linking or Domain Association activations:  void   Start ()  { \n     ImaginationOverflow . UniversalDeepLinking . DeepLinkManager . Instance . LinkActivated   +=   Instance_LinkActivated ;  }  private   void   Instance_LinkActivated ( ImaginationOverflow . UniversalDeepLinking . LinkActivation   s )  { \n     // \n     //  my activation code \n     //  }   Never forget to remove your event registration when the  GameObject  where you registered it is  destroyed :  1\n2\n3\n4 void   OnDestroy ()  { \n     ImaginationOverflow . UniversalDeepLinking . DeepLinkManager . Instance . LinkActivated   -=   Instance_LinkActivated ;  }    The  LinkActivated  event will be triggered when your game is  started  or  resumed  by a Deep Link or Domain activation.  The  LinkActivated  event single argument  LinkActivation  contains the Uri that triggered the game activation, a string with the raw  Query String  and a Dictionary with the query string already processed:   1\n2\n3\n4\n5\n6\n7\n8 public   class   LinkActivation  { \n     public   string   Uri   {   get ;   private   set ;   } \n\n     public   string   RawQueryString   {   get ;   private   set ;   } \n\n     public   Dictionary string ,   string   QueryString   {   get ;   private   set ;   }  }    Consider the following example:  1\n2\n3\n4\n5\n6 private   void   Instance_LinkActivated2 ( ImaginationOverflow . UniversalDeepLinking . LinkActivation   linkActivation )  { \n     var   url   =   linkActivation . Url ; \n     var   querystring   =   linkActivation . RawQueryString ; \n     var   qParameter   =   linkActivation . QueryString [ q ];  }    If Sudoku Zenkai is activated with the following link:  https://sudokuzenkai.imaginationoverflow.com/dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==  The variables values would be:   url  - https://sudokuzenkai.imaginationoverflow.com/dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==  querystring  - q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==  qParameter  - ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==   If you have the game installed on your device right now, instead of using the site URI you can use the deep linking URI instead:  sudokuzenkai://dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==  You should be seeing the exact puzzle as seen below.", 
            "title": "Using the Plugin"
        }, 
        {
            "location": "/HowToUse/#configuring-the-plugin", 
            "text": "The configuration interface is under  Window  -   ImaginationOverflow  -   Universal DeepLink Configuration    On some platforms, the operating system ask the player what app she wishes to use after clicking a custom URI, the  Display Name  allows you to configure what name will the OS show on that occasion.\nThe  Steam App Id  is for Steam only games, you can read about Steam integration is [INSERT STEAM DOCUMENTATION HERE]. \nThe plugin allows you to configure the deep linking and domain association globally or per platform.", 
            "title": "Configuring the Plugin"
        }, 
        {
            "location": "/HowToUse/#global-configuration", 
            "text": "If you are using the same custom URIs and Domains for every platform, you only need to setup it once and the plugin will automatically propagate all data to all platforms as you build for them.  To configure a Deep Link or a Domain Association you need to provide:   Scheme  - it can be anything you wish, remember to check the Stores for other apps or games that are also using an URI you wish to adopt (when configuring for deep linking), for domain association it's usually  http , if your site supports  https  add another entry to the list.  Host  - this parameter is usually only used for domain association, here you should put the host of your website  Path  - some platforms support which  paths  the application should be activated, but usually this is accomplished using other configuration files see [DOMAIN ASSOCIATION CONFIG FILES].", 
            "title": "Global Configuration"
        }, 
        {
            "location": "/HowToUse/#per-platform-configuration", 
            "text": "When you wish to override any configuration for a specific platform you can do that by clicking on the specific platform checkbox. After that, you just need to fill out the Deep Linking and Domain Association data or leave it empty if you do not wish to support these features for that specific platform. Note that by checking a platform none of the global configurations will be used for that specific platform.   In the example above, we've changed the  Android  Deep Linking  scheme  to  sudokuzenkaidroid  and disabled the Domain Association capability. The remaining platforms will continue to use the global configurations.", 
            "title": "Per Platform Configuration"
        }, 
        {
            "location": "/HowToUse/#testing", 
            "text": "After your game is deployed to a device, you can test the integration simply by clicking on a configured URI on any app or website. As an example, you can send yourself a message (on any messaging app) or an email with the proper URI.", 
            "title": "Testing"
        }, 
        {
            "location": "/HowToUse/#editor", 
            "text": "We include a simple interface where you can test your deep linking activation without deploying, you can insert any valid and invalid URIs in order to test your integration.    When you press Debug, the LinkActivated will be triggered and your callback called if the application is running in the editor.", 
            "title": "Editor"
        }, 
        {
            "location": "/HowToUse/#ios", 
            "text": "", 
            "title": "iOS"
        }, 
        {
            "location": "/HowToUse/#simulator", 
            "text": "After your game is installed on a simulator, open a terminal and run the following command:  1 xcrun simctl openurl booted  [MY_URI_HERE]", 
            "title": "Simulator"
        }, 
        {
            "location": "/HowToUse/#examples", 
            "text": "1 xcrun simctl openurl booted  sudokuzenkai://dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==    1 xcrun simctl openurl booted  https://sudokuzenkai.imaginationoverflow.com/dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==", 
            "title": "Examples"
        }, 
        {
            "location": "/HowToUse/#android", 
            "text": "Open a terminal on your development machine, open a terminal (console or powershell) and run the command:  1 adb shell am start -W -a android.intent.action.VIEW -d  [MY_URI_HERE]", 
            "title": "Android"
        }, 
        {
            "location": "/HowToUse/#examples_1", 
            "text": "1 adb shell am start -W -a android.intent.action.VIEW -d  sudokuzenkai://dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==    1 adb shell am start -W -a android.intent.action.VIEW -d  https://sudokuzenkai.imaginationoverflow.com/dailychallenge?q=ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA==", 
            "title": "Examples"
        }, 
        {
            "location": "/HowToUse/#windows-10", 
            "text": "You can use windows run program to test your integration, just click on the  Windows Button  and  R  and place your URI on the command option and press  Ok .", 
            "title": "Windows 10"
        }, 
        {
            "location": "/HowToUse/#mac", 
            "text": "Open up a terminal and use the  Open  command:  1 open   [ MY_URI_HERE ]    1 open  sudokuzenkai://dailychallenge?q = ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA ==", 
            "title": "Mac"
        }, 
        {
            "location": "/HowToUse/#linux", 
            "text": "On Linux you can use the xdg-open command to test your integration, open up a terminal and run the following command.  1 xdg-open   [ MY_URI_HERE ]    1 xdg-open  sudokuzenkai://dailychallenge?q = ZMORw4TDhcOKw4fDisOKw4jDhMOFw4bDjMOEw4TDhMOEw4TDhMOEw4TClA ==", 
            "title": "Linux"
        }, 
        {
            "location": "/HowToUse/#standalone-considerations", 
            "text": "On Windows and Linux standalone builds, the Deep Linking is only configured when the game runs the first time, so even if the player has the game installed on his machine, if he didn't play at least one time, the Deep Linking connection won't activate the game.\nFor further details on why this happens, you can check our Deep Dive section [INSERT LINK HERE]", 
            "title": "Standalone Considerations"
        }, 
        {
            "location": "/DomainAssociationConfig/", 
            "text": "Preface\n\n\nThe documentation below is just a quick setup guide so that you can quickly integrate the Domain Association capability of the ImaginationOverflow Universal Deep Linking plugin if you wish to know more about this feature you can consult the official documentation:\n\n\n\n\nUniversal Links - iOS\n\n\nApp Links - Android\n\n\nUri Handling - Windows UWP\n\n\n\n\nNote\n that the Universal Deep Linking plugin \nalready handles all registration and configuration\n to support Domain Association, you won't need to change any configurations on your manifest or configuration files on your Unity project. \n\n\nThe plugin \ndoes not\n, however, create or configure the required files that you need to host on your website, nor the dev account configurations required to enables this capability on some platforms. \n\n\nThe following configuration steps are only required if you wish to use the Domain Association feature, if you are only using Deep Linking, you can skip these steps.\n\n\niOS - Universal Links\n\n\nThe first thing you will need to do is activate the \nAssociated Domains\n service on your app id:\n\n\n\n\nLogin on your Apple developer account in \nhttps://developer.apple.com/\n\n\nIn Identifiers -\n App ID's, create or edit the app you wish to add Domain Association.\n\n\nCheck the \nAssociated Domains\n checkbox\n\n\nSave the changes\n\n\n\n\nAfter you added the Associated Domain service, your page should look like the following:\n\n\n\n\nFrom the above image, set-aside the \nPrefix\n and the \nID\n. In Sudoku Zenkai case the Prefix is \n5DVD99WQGR\n and the ID \ncom.imaginationoverflow.com.sudokuzenkai\n.\n\n\nNow you need to create a json file named \napple-app-site-association\n (no extension) with the following contents:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n{\n\n    \napplinks\n:\n \n{\n\n        \napps\n:\n \n[],\n\n        \ndetails\n:\n \n[\n\n            \n{\n\n                \nappID\n:\n \n[PREFIX].[ID]\n,\n\n                \npaths\n:\n \n[\n \n*\n]\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nWith the file created you need to upload it to your website. The file should be accessible on either, the root or the \n.well-known\n directory:\n\n\n1\n2\n3\n4\n5\nhttps://\nyour_domain\n/.well-known/apple-app-site-association\n\nor\n\nhttps://\nyour_domain\n/apple-app-site-association\n\n\n\n\n\n\nYou can check Sudoku Zenkai and Loyca (other of our projects) association files on:\n\nhttp://sudokuzenkai.imaginationoverflow.com/apple-app-site-association\n \n\n\nhttp://loyca.imaginationoverflow.com/.well-known/apple-app-site-association\n\n\nWith the above configuration, you are telling the iOS that all links to your website should be opened in your game, you may wish to configure only a few paths, to do that you can check the \nofficial documentation\n.\n\n\nFinally, your site must be using \nHTTPS\n, if you don't have it this feature won't work! \n\n\nAndroid - App Links\n\n\nThe first thing you need to configure the Domain Association is a \npackage name\n, to configure that on your Unity Project click on \nEdit\n -\n \nProject Settings\n -\n \nPlayer\n.\nIn the Android options you will find the \nPackage Name\n setting: \n\n\n\n\nFor more info on how to choose a package name checkout \nGoogle Documentation\n.\n\n\nThe second thing you need to have is a keystore, you need to sign your game before submitting it to the store, you can get more info on \nGoogle documentation\n about this topic.\n\n\nAfter creating your keystore, you need to get \nSHA-256 certificate fingerprint\n, to do that just run the following command on your terminal (note the keytool comes with the Java SDK) :\n\n\n1\nkeytool -list -v -keystore mystorekeystore.keystore\n\n\n\n\n\n\nRunning this command should yield something similar to the following image:\n\n\n\nWith the package name and SHA-256 certificate fingerprint, you can finally create the \ndigital asset link\n file, the filename should be \nassetlinks.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n[{\n\n  \nrelation\n:\n \n[\ndelegate_permission/common.handle_all_urls\n],\n\n  \ntarget\n:\n \n{\n\n    \nnamespace\n:\n \nandroid_app\n,\n\n    \npackage_name\n:\n \n[MY_APP_PACKAGE_NAME]\n,\n\n    \nsha256_cert_fingerprints\n:\n \n[\n[SHA256_FINGERPRINT_FROM_KEYTOOL]\n]\n\n  \n}\n\n\n}]\n\n\n\n\n\n\n\nFinally you need to host the file on your website, it needs to be available on the \nroot\n or \n.well-known\n directory.\n\n\n1\n2\n3\n4\n5\nhttps://\nyour_domain\n/.well-known/assetlinks.json\n\nor\n\nhttps://\nyour_domain\n/assetlinks.json\n\n\n\n\n\n\nYou can check Sudoku Zenkai and Loyca digital asset link on the following links:\n\n\nhttps://sudokuzenkai.imaginationoverflow.com/assetlinks.json\n\n\nhttps://loyca.imaginationoverflow.com/.well-known/assetlinks.json\n\n\nThese files have optional configurations that you can use, for more info about these configurations check the \nofficial documentation\n.\n\n\nWindows UWP - Uri Handling\n\n\nTo enable Domain Association on UWP you need to reserve a game name on the Windows Dev Center dashboard, to do that you can follow the \noficial documentation\n.\n\n\nAfter you reserved your game name, you will need to go into the game settings under the Windows Dev Center dashboard, \nApp Management\n -\n \nApp identity\n:\n\n\n\n\nFrom there you can check your game \nPackage Family Name\n, just as seen in the picture above.\n\n\nWith it, you need to create a json file named \nwindows-app-web-link\n (no extension) and upload it to your website, under the \nroot\n or \n.well-know\n directory.\n\n\n1\n2\n3\n4\n5\n[{\n\n  \npackageFamilyName\n:\n \n[YOUR_PACKAGE_FAMILY_NAME]\n,\n\n  \npaths\n:\n \n[\n \n*\n \n],\n\n  \nexcludePaths\n \n:\n \n[\n \n]\n\n \n}]\n \n\n\n\n\n\n\nFor some examples check out Sudoku Zenkai and Loyca \nwindows-app-web-link\n files:\n\n\nhttps://sudokuzenkai.imaginationoverflow.com/windows-app-web-link\n\n\nhttps://loyca.imaginationoverflow.com/windows-app-web-link\n\n\nYou can set up other configurations on windows-app-web-link for more info check the \nofficial documentation\n.\n\n\nFinally, it's mandatory that your website supports \nHTTPS\n, because the windows will make an HTTPS request to try to retrieve the link.\n\n\nNotes\n\n\n\n\nThe domain association feature only works for iOS, Android, and Windows (UWP).\n\n\nAt ImaginationOverflow we are using \nCloud Flare\n free tier service to enable \nHTTPS\n on all our domains.", 
            "title": "Domain Association"
        }, 
        {
            "location": "/DomainAssociationConfig/#preface", 
            "text": "The documentation below is just a quick setup guide so that you can quickly integrate the Domain Association capability of the ImaginationOverflow Universal Deep Linking plugin if you wish to know more about this feature you can consult the official documentation:   Universal Links - iOS  App Links - Android  Uri Handling - Windows UWP   Note  that the Universal Deep Linking plugin  already handles all registration and configuration  to support Domain Association, you won't need to change any configurations on your manifest or configuration files on your Unity project.   The plugin  does not , however, create or configure the required files that you need to host on your website, nor the dev account configurations required to enables this capability on some platforms.   The following configuration steps are only required if you wish to use the Domain Association feature, if you are only using Deep Linking, you can skip these steps.", 
            "title": "Preface"
        }, 
        {
            "location": "/DomainAssociationConfig/#ios-universal-links", 
            "text": "The first thing you will need to do is activate the  Associated Domains  service on your app id:   Login on your Apple developer account in  https://developer.apple.com/  In Identifiers -  App ID's, create or edit the app you wish to add Domain Association.  Check the  Associated Domains  checkbox  Save the changes   After you added the Associated Domain service, your page should look like the following:   From the above image, set-aside the  Prefix  and the  ID . In Sudoku Zenkai case the Prefix is  5DVD99WQGR  and the ID  com.imaginationoverflow.com.sudokuzenkai .  Now you need to create a json file named  apple-app-site-association  (no extension) with the following contents:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 { \n     applinks :   { \n         apps :   [], \n         details :   [ \n             { \n                 appID :   [PREFIX].[ID] , \n                 paths :   [   * ] \n             } \n         ] \n     }  }    With the file created you need to upload it to your website. The file should be accessible on either, the root or the  .well-known  directory:  1\n2\n3\n4\n5 https:// your_domain /.well-known/apple-app-site-association\n\nor\n\nhttps:// your_domain /apple-app-site-association   You can check Sudoku Zenkai and Loyca (other of our projects) association files on: http://sudokuzenkai.imaginationoverflow.com/apple-app-site-association    http://loyca.imaginationoverflow.com/.well-known/apple-app-site-association  With the above configuration, you are telling the iOS that all links to your website should be opened in your game, you may wish to configure only a few paths, to do that you can check the  official documentation .  Finally, your site must be using  HTTPS , if you don't have it this feature won't work!", 
            "title": "iOS - Universal Links"
        }, 
        {
            "location": "/DomainAssociationConfig/#android-app-links", 
            "text": "The first thing you need to configure the Domain Association is a  package name , to configure that on your Unity Project click on  Edit  -   Project Settings  -   Player .\nIn the Android options you will find the  Package Name  setting:    For more info on how to choose a package name checkout  Google Documentation .  The second thing you need to have is a keystore, you need to sign your game before submitting it to the store, you can get more info on  Google documentation  about this topic.  After creating your keystore, you need to get  SHA-256 certificate fingerprint , to do that just run the following command on your terminal (note the keytool comes with the Java SDK) :  1 keytool -list -v -keystore mystorekeystore.keystore   Running this command should yield something similar to the following image:  With the package name and SHA-256 certificate fingerprint, you can finally create the  digital asset link  file, the filename should be  assetlinks.json  1\n2\n3\n4\n5\n6\n7\n8 [{ \n   relation :   [ delegate_permission/common.handle_all_urls ], \n   target :   { \n     namespace :   android_app , \n     package_name :   [MY_APP_PACKAGE_NAME] , \n     sha256_cert_fingerprints :   [ [SHA256_FINGERPRINT_FROM_KEYTOOL] ] \n   }  }]    Finally you need to host the file on your website, it needs to be available on the  root  or  .well-known  directory.  1\n2\n3\n4\n5 https:// your_domain /.well-known/assetlinks.json\n\nor\n\nhttps:// your_domain /assetlinks.json   You can check Sudoku Zenkai and Loyca digital asset link on the following links:  https://sudokuzenkai.imaginationoverflow.com/assetlinks.json  https://loyca.imaginationoverflow.com/.well-known/assetlinks.json  These files have optional configurations that you can use, for more info about these configurations check the  official documentation .", 
            "title": "Android - App Links"
        }, 
        {
            "location": "/DomainAssociationConfig/#windows-uwp-uri-handling", 
            "text": "To enable Domain Association on UWP you need to reserve a game name on the Windows Dev Center dashboard, to do that you can follow the  oficial documentation .  After you reserved your game name, you will need to go into the game settings under the Windows Dev Center dashboard,  App Management  -   App identity :   From there you can check your game  Package Family Name , just as seen in the picture above.  With it, you need to create a json file named  windows-app-web-link  (no extension) and upload it to your website, under the  root  or  .well-know  directory.  1\n2\n3\n4\n5 [{ \n   packageFamilyName :   [YOUR_PACKAGE_FAMILY_NAME] , \n   paths :   [   *   ], \n   excludePaths   :   [   ] \n  }]     For some examples check out Sudoku Zenkai and Loyca  windows-app-web-link  files:  https://sudokuzenkai.imaginationoverflow.com/windows-app-web-link  https://loyca.imaginationoverflow.com/windows-app-web-link  You can set up other configurations on windows-app-web-link for more info check the  official documentation .  Finally, it's mandatory that your website supports  HTTPS , because the windows will make an HTTPS request to try to retrieve the link.", 
            "title": "Windows UWP - Uri Handling"
        }, 
        {
            "location": "/DomainAssociationConfig/#notes", 
            "text": "The domain association feature only works for iOS, Android, and Windows (UWP).  At ImaginationOverflow we are using  Cloud Flare  free tier service to enable  HTTPS  on all our domains.", 
            "title": "Notes"
        }, 
        {
            "location": "/SteamIntegration/", 
            "text": "Preface\n\n\nRegular Standalone Deep Linking opens up your game when someone clicks on a custom defined URI. But if your game is on Steam you are probably using its SDK or DRM capabilities to further enhance your players' experience.\n\n\nIf you open a Steam game from its installation folder, since it wasn't open via steam it probably won't be able to communicate with valve software in order to report achievements, stats, etc, or it won't simply launch due to the DRM feature.\n\n\nSo using the regular Deep Linking mechanism where we associate a custom URI to a game executable wouldn't work since the game would possibly lose functionality or simply wouldn't start.\n\n\nTo avoid this issue, instead of registering your game to your custom URI, we configure the target systems to open steam instead of your game, but we parameterize Steam to open your game as soon as it's initialized.\n\n\nConfiguring Steam Integration\n\n\nTo enable the Steam capability of ImaginationOverflow Deep Linking Plugin you first need to have a valid app id, for that you need to get access to \nSteam Direct\n. After that valve will attribute to your game an ID.\n\n\n\n\nAs an example, Sudoku Zenkai id is \n809850\n. \n\n\nThen you need to configure the plugin with this id:\n\n\n\n\nThe final step of the configuration to enable the Steam integration is setting the \nIsSteamBuild\n Property under \nDeepLinkManager\n:\n\n\n1\nImaginationOverflow\n.\nUniversalDeepLinking\n.\nDeepLinkManager\n.\nInstance\n.\nIsSteamBuild\n \n=\n \ntrue\n;\n\n\n\n\n\n\n\nIf your game is on Steam there is a good chance that you offer DRM-free versions of it on other stores, so don't forget to turn off this option when making DRM-free standalone builds, a good way to do this automatically is using \ncompilation flags\n.\n\n\n1\n2\n3\n4\n5\n#if STEAM_BUILD\n\n\nImaginationOverflow\n.\nUniversalDeepLinking\n.\nDeepLinkManager\n.\nInstance\n.\nIsSteamBuild\n \n=\n \ntrue\n;\n\n\n#else\n\n\nImaginationOverflow\n.\nUniversalDeepLinking\n.\nDeepLinkManager\n.\nInstance\n.\nIsSteamBuild\n \n=\n \nfalse\n;\n\n\n#endif\n\n\n\n\n\n\n\nMac and Steam Integration\n\n\nMac Deep Linking works a little different from the Windows and Linux, you have to take special care when integrating the plugin with Mac and Steam.\n\n\nThe OS itself doesn't know that is running a Steam game, so when the user clicks on a custom URI, the OS opens the game executable [MORE DEEP DIVE]. So you need to manually enforce the DRM after you get the deep linking data TO BE COMPLETEd", 
            "title": "Steam Integration"
        }, 
        {
            "location": "/SteamIntegration/#preface", 
            "text": "Regular Standalone Deep Linking opens up your game when someone clicks on a custom defined URI. But if your game is on Steam you are probably using its SDK or DRM capabilities to further enhance your players' experience.  If you open a Steam game from its installation folder, since it wasn't open via steam it probably won't be able to communicate with valve software in order to report achievements, stats, etc, or it won't simply launch due to the DRM feature.  So using the regular Deep Linking mechanism where we associate a custom URI to a game executable wouldn't work since the game would possibly lose functionality or simply wouldn't start.  To avoid this issue, instead of registering your game to your custom URI, we configure the target systems to open steam instead of your game, but we parameterize Steam to open your game as soon as it's initialized.", 
            "title": "Preface"
        }, 
        {
            "location": "/SteamIntegration/#configuring-steam-integration", 
            "text": "To enable the Steam capability of ImaginationOverflow Deep Linking Plugin you first need to have a valid app id, for that you need to get access to  Steam Direct . After that valve will attribute to your game an ID.   As an example, Sudoku Zenkai id is  809850 .   Then you need to configure the plugin with this id:   The final step of the configuration to enable the Steam integration is setting the  IsSteamBuild  Property under  DeepLinkManager :  1 ImaginationOverflow . UniversalDeepLinking . DeepLinkManager . Instance . IsSteamBuild   =   true ;    If your game is on Steam there is a good chance that you offer DRM-free versions of it on other stores, so don't forget to turn off this option when making DRM-free standalone builds, a good way to do this automatically is using  compilation flags .  1\n2\n3\n4\n5 #if STEAM_BUILD  ImaginationOverflow . UniversalDeepLinking . DeepLinkManager . Instance . IsSteamBuild   =   true ;  #else  ImaginationOverflow . UniversalDeepLinking . DeepLinkManager . Instance . IsSteamBuild   =   false ;  #endif", 
            "title": "Configuring Steam Integration"
        }, 
        {
            "location": "/SteamIntegration/#mac-and-steam-integration", 
            "text": "Mac Deep Linking works a little different from the Windows and Linux, you have to take special care when integrating the plugin with Mac and Steam.  The OS itself doesn't know that is running a Steam game, so when the user clicks on a custom URI, the OS opens the game executable [MORE DEEP DIVE]. So you need to manually enforce the DRM after you get the deep linking data TO BE COMPLETEd", 
            "title": "Mac and Steam Integration"
        }, 
        {
            "location": "/DeepDive/", 
            "text": "asd", 
            "title": "Inside the Plugin"
        }, 
        {
            "location": "/DeepDive/", 
            "text": "asd", 
            "title": "Deeplinking and URI association"
        }
    ]
}